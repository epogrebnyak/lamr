{
    "Topics": [
        {
            "title": "Jump Into Programming",
            "learning_points": [
                "Python Developper Survey: Is learning Python a good bet?",
                "Python ecosystem: language, libraries, tools.",
                {
                    "title": "Where to run a Python program.",
                    "learning_points": [
                        "Local vs online ([Google Colab](^colab), [repl.it](^replit)) installation.",
                        "Jupyter notebooks vs plain code.",
                        "Codespaces and Gitpod for Github repositories.",
                        "PyDiode console <https://pyodide.org/en/stable/console.html>"
                    ]
                },
                {
                    "title": "Minimal Python syntax: values and operations.",
                    "learning_points": [
                        "Numbers and arithmetic operations.",
                        "Strings and operations on strings.Comparison and boolean values.",
                        "Operators (assignment, arithmetic, comparison, membership)."
                    ]
                },
                {
                    "title": "Minimal Python syntax: the rest",
                    "learning_points": [
                        "Variables (naming, assignment, mutation).",
                        "Sequences: lists and tuples.",
                        "Iteration with `for` loops.",
                        "Conditional execution with `if`/`else`.",
                        "Functions and methods.",
                        "Importing modules and packages.",
                        "Input and output (console, command line, files and web requests)."
                    ]
                },
                {
                    "title": "More of basic Python syntax",
                    "learning_points": [
                        "Dictionaries.",
                        "List comprehensions.",
                        "`while` loops.",
                        "Exceptions and `try`/`except` statement."
                    ]
                },
                {
                    "title": "Read, talk and ask:",
                    "learning_points": [
                        "Describing what your program does as input, steps and output. Writing pseudocode.",
                        "Reading documentation: core Python, standard library and popular packages.",
                        "Search and evaluate: what to expect on first Google page?",
                        "Asking help right: 'my code doesn't work' vs an [MRE](^mre).",
                        "Code generation assistants (Copilot, ChatGPT, and similar)."
                    ]
                },
                "Common pitfalls and workarounds at programming start.",
                {
                    "title": "What can you do next",
                    "learning_points": [
                        "Tutorials (and escaping '[tutorial hell](^th)').",
                        "Toy projects (open-end). Excercises (known result, eg replicate std library function).",
                        "Finding your itch (a problem to solve).",
                        "Code practice sites ([Leetcode](^leet), [Codewars](^codewars), and similar).",
                        "Contributing to open source projects.",
                        "Answering other people's questions.",
                        "Excercise: what makes a good code problem?"
                    ]
                }
            ],
            "references": {
                "th": {
                    "url": "https://www.reddit.com/r/learnprogramming/comments/qrlx5m/what_exactly_is_tutorial_hell/?utm_source=share&utm_medium=web2x&context=3"
                },
                "colab": {
                    "url": "https://colab.research.google.com/"
                },
                "replit": {
                    "url": "https://replit.com/"
                },
                "mre": {
                    "url": "https://replit.com/"
                },
                "leet": {
                    "url": "https://leetcode.com/"
                },
                "codewars": {
                    "url": "https://www.codewars.com"
                }
            },
            "tagline": "Start learning Python syntax and usage."
        },
        {
            "title": "Designing Programs",
            "learning_points": [
                "Values and types",
                "Data structures, primitive and compound types",
                "Variables",
                "Expressions and statements",
                "Functions",
                "OOP and classes"
            ],
            "references": {},
            "tagline": "Learn programming concepts."
        },
        {
            "title": "Project as a Package",
            "learning_points": [
                "Package managers (pip, poetry and alternatives).",
                "Virtual environments.",
                "[Project packaging and utilities](^hypermodern)."
            ],
            "references": {
                "hypermodern": {
                    "title": "Hypermodern Project Packaging",
                    "author": "Claudio Jolowicz",
                    "url": "https://cjolowicz.github.io/posts/hypermodern-python-01-setup/"
                }
            },
            "tagline": "Learn how to distribute your code as a package with modern tools."
        },
        {
            "title": "Write Better Code",
            "learning_points": [
                "Can code quality be measured?",
                "Programming style, patterns and best practices.",
                "Refactoring: @beyond_pep8, @refactor_superhero, and @fowler."
            ],
            "references": {
                "beyond_pep8": {
                    "title": "Beyond PEP8",
                    "author": "Raymond Herringer",
                    "url": "https://www.youtube.com/watch?v=wf-BqAjZb8M"
                },
                "refactor_superhero": {
                    "title": "Refactor Like A Superhero",
                    "author": "Alex Bespoyasov",
                    "url": "https://github.com/bespoyasov/refactor-like-a-superhero"
                },
                "fowler": {
                    "title": "Refactoring: Improving the Design of Existing Code",
                    "author": "Martin Fowler (with Kent Beck)",
                    "url": "https://martinfowler.com/books/refactoring.html"
                }
            },
            "tagline": ""
        },
        {
            "title": "Testing",
            "learning_points": [
                "Excercise: `assert` statement with a function call.",
                "Aims and types of testing. Unit tests. [JetBrains survey (2021) on testing](^sde_testing).",
                "Unit-testing frameworks (@pytest, @unittest) and their [popularity](^sde_libraries).",
                "Continious integration (CI).",
                "Test-driven development (TDD) and ['Where Did It All Go Wrong'](^tdd)."
            ],
            "references": {
                "sde_testing": {
                    "text": "State of Developper Ecosystem (2021). Testing.",
                    "url": "https://www.jetbrains.com/lp/devecosystem-2021/testing/"
                },
                "sde_libraries": {
                    "text": "State of Developper Ecosystem (2021). Python Frameworks and Libraries.",
                    "url": "https://lp.jetbrains.com/python-developers-survey-2021/#FrameworksLibraries"
                },
                "pytest": {
                    "text": "pytest",
                    "url": "https://docs.pytest.org/en/7.1.x/getting-started.html#create-your-first-test"
                },
                "unittest": {
                    "text": "unittest",
                    "url": "https://docs.python.org/3/library/unittest.html"
                },
                "tdd": {
                    "title": "TDD, Where Did It All Go Wrong",
                    "author": "Ian Cooper",
                    "url": "https://www.youtube.com/watch?v=EZ05e7EMOLM"
                }
            },
            "tagline": ""
        },
        {
            "title": "Docs-as-Code",
            "learning_points": [
                "Excercise: Writing a function docstring.",
                "[Markdown](^gh_markdown) and lightweight markup languages (rst, asciidoc).",
                "Excercise: Writing a good README.md - [but how?](^how)",
                "Documentation and website builders: @sphinx, [mkdocs-material](^mkdocs), [Jupyter Book](^jb)",
                "Genres of documentation ([text](^divio), [video](^kinds4))."
            ],
            "references": {
                "iam_readme": {
                    "text": "Hi, my name is README",
                    "url": "https://raphael.codes/talks/"
                },
                "how": {
                    "text": "Awesome README - Articles",
                    "url": "https://github.com/matiassingers/awesome-readme#articles"
                },
                "gh_markdown": {
                    "text": "Start writing on GitHub / Basic formatting syntax.",
                    "url": "https://docs.github.com/en/get-started/writing-on-github/getting-started-with-writing-and-formatting-on-github/basic-writing-and-formatting-syntax"
                },
                "sphinx": {
                    "text": "sphinx-doc",
                    "url": "https://www.sphinx-doc.org/en/master/"
                },
                "mkdocs": {
                    "text": "mkdocs-material",
                    "url": "https://squidfunk.github.io/mkdocs-material/"
                },
                "jb": {
                    "text": "jupyterbook",
                    "url": "https://jupyterbook.org/en/stable/intro.html"
                },
                "kinds4": {
                    "title": "The four kinds of documentation, and why you need to understand what they are",
                    "author": "Daniele Procida",
                    "url": "https://www.writethedocs.org/videos/eu/2017/the-four-kinds-of-documentation-and-why-you-need-to-understand-what-they-are-daniele-procida/"
                },
                "divio": {
                    "text": "The documentation system",
                    "url": "https://documentation.divio.com/"
                }
            },
            "tagline": "Writing and building documentation."
        },
        {
            "title": "More Python Features",
            "learning_points": [
                {
                    "title": "Type annotations",
                    "learning_points": []
                },
                {
                    "title": "Higher-order functions, iteration and lazyness",
                    "learning_points": [
                        "Iterators and generators. `itertools` library.",
                        "`functools` library: `filter`, `map`, `reduce`"
                    ]
                },
                {
                    "title": "Flow of execution and behaviours",
                    "learning_points": [
                        "Decorators",
                        "Context managers",
                        "Pattern matching",
                        "Walrus assignent operator"
                    ]
                },
                {
                    "title": "Data stuctures",
                    "learning_points": [
                        "Dataclasses",
                        "Enumerations"
                    ]
                }
            ],
            "references": {},
            "tagline": ""
        },
        {
            "title": "Advanced Capabilities",
            "learning_points": [
                "Asynchronous programming and multithreading",
                "Metaprogramming (ABC)",
                "Performance tuning"
            ],
            "references": {},
            "tagline": ""
        }
    ]
}