import{_ as e,c as t,o as a,V as i}from"./chunks/framework.xIdpYtwv.js";const f=JSON.parse('{"title":"Turing Machine","description":"","frontmatter":{},"headers":[],"relativePath":"topics/turing.md","filePath":"topics/turing.md"}'),o={name:"topics/turing.md"},n=i('<h1 id="turing-machine" tabindex="-1">Turing Machine <a class="header-anchor" href="#turing-machine" aria-label="Permalink to &quot;Turing Machine&quot;">​</a></h1><p><a href="https://www.reddit.com/r/learnprogramming/comments/1ar1pbc/comment/kqlzlbf/" target="_blank" rel="noreferrer"><img src="https://img.shields.io/badge/Reddit-%23FF4500.svg?style=flat&amp;logo=Reddit&amp;logoColor=white" alt="Reddit"></a></p><p>A Turing machine is a hypothetical machine with an infinite memory tape that can only:</p><ul><li>read the value on the tape,</li><li>write a new value to the tape,</li><li>move the tape left or right to a new position,</li><li>maintain and change between a finite set of states,</li><li>conditionally do the above based on the result of a tape read.</li></ul><p>It is proven that mathematically, any machine that can do the above can compute anything that is mathematically computable.</p><p>That is, the set of all problems that a Turing machine be can solve is equal to the set of all problems solvable by lambda calculus (the mathematical formalism of computation, see <a href="https://en.m.wikipedia.org/wiki/Church%E2%80%93Turing_thesis" target="_blank" rel="noreferrer">Church-Turing thesis</a>).</p><p>In real life, no Turing machines can exist due to the requirement for an infinite memory. But ignoring that, we call a language Turing complete if it can perform the operations of a Turing machine.</p><h2 id="how-about-being-turing-incomplete" tabindex="-1">How about being Turing-incomplete? <a class="header-anchor" href="#how-about-being-turing-incomplete" aria-label="Permalink to &quot;How about being Turing-incomplete?&quot;">​</a></h2><p>Turing completeness is one of those things where it can lead to people using a language for more than is needed from it. <a href="https://dhall-lang.org/" target="_blank" rel="noreferrer">Dhall</a> is meant as a slightly more powerful way of configuring stuff (like JSON or TOML) but without the full power and complexity of a programming language. HTML by itself is also not Turing complete, as it&#39;s only purpose is to create document layouts.</p><p>On the other hand, HTML+CSS and Microsoft PowerPoint are Turing complete if you allow for a user to click elements. Microsoft Excel is also Turing complete using just cell formulas. You can find YouTube videos of people who made low-powered CPU emulators in PowerPoint and Excel.</p><p>In fact, if you define your language well enough, <a href="https://en.m.wikipedia.org/wiki/One-instruction_set_computer" target="_blank" rel="noreferrer">a single instruction</a> is all that is needed for a Turing complete language (although very impractical).</p>',11),r=[n];function l(s,c,h,u,p,m){return a(),t("div",null,r)}const d=e(o,[["render",l]]);export{f as __pageData,d as default};
